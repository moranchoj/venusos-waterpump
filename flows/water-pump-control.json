[
    {
        "id": "pump-control-tab",
        "type": "tab",
        "label": "Water Pump Control",
        "disabled": false,
        "info": "Sistema de control automatitzat de bomba d'aigua entre dos dipòsits"
    },
    {
        "id": "tank-a-level",
        "type": "mqtt in",
        "z": "pump-control-tab",
        "name": "Tank A Level",
        "topic": "N/+/tank/0/Level",
        "qos": "2",
        "datatype": "auto",
        "broker": "venus-broker",
        "x": 120,
        "y": 100,
        "wires": [["tank-a-level-process"]]
    },
    {
        "id": "tank-b-level",
        "type": "mqtt in",
        "z": "pump-control-tab",
        "name": "Tank B Level",
        "topic": "N/+/tank/1/Level",
        "qos": "2",
        "datatype": "auto",
        "broker": "venus-broker",
        "x": 120,
        "y": 160,
        "wires": [["tank-b-level-process"]]
    },
    {
        "id": "tank-a-level-process",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Process Tank A Level",
        "func": "// Process tank A level (lower tank)\nvar level = parseFloat(msg.payload);\nif (!isNaN(level)) {\n    // Store level in flow context\n    flow.set('tankA_level', level);\n    \n    // Prepare message for dashboard\n    msg.payload = level;\n    msg.topic = \"Tank A Level\";\n    \n    // Trigger control logic\n    node.send([msg, {payload: \"check_control\"}]);\n} else {\n    node.warn(\"Invalid Tank A level received: \" + msg.payload);\n}\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [["tank-a-gauge"], ["control-logic"]]
    },
    {
        "id": "tank-b-level-process",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Process Tank B Level",
        "func": "// Process tank B level (upper tank)\nvar level = parseFloat(msg.payload);\nif (!isNaN(level)) {\n    // Store level in flow context\n    flow.set('tankB_level', level);\n    \n    // Prepare message for dashboard\n    msg.payload = level;\n    msg.topic = \"Tank B Level\";\n    \n    // Trigger control logic\n    node.send([msg, {payload: \"check_control\"}]);\n} else {\n    node.warn(\"Invalid Tank B level received: \" + msg.payload);\n}\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [["tank-b-gauge"], ["control-logic"]]
    },
    {
        "id": "control-logic",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Pump Control Logic",
        "func": "// Get current tank levels from flow context\nvar tankA_level = flow.get('tankA_level') || 0;\nvar tankB_level = flow.get('tankB_level') || 0;\nvar currentPumpState = flow.get('pump_state') || false;\n\n// Control Logic:\n// Start pump (close relay) if:\n// - Tank A level > 10% AND Tank B level < 85%\n// Stop pump (open relay) if:\n// - Tank A level < 10% OR Tank B level >= 100%\n\nvar shouldStart = (tankA_level > 10) && (tankB_level < 85);\nvar shouldStop = (tankA_level < 10) || (tankB_level >= 100);\n\nvar newPumpState = currentPumpState;\n\n// Priority: Stop conditions override start conditions\nif (shouldStop) {\n    newPumpState = false;\n    node.log(\"Pump stopped - Tank A: \" + tankA_level + \"%, Tank B: \" + tankB_level + \"%\");\n} else if (shouldStart && !currentPumpState) {\n    newPumpState = true;\n    node.log(\"Pump started - Tank A: \" + tankA_level + \"%, Tank B: \" + tankB_level + \"%\");\n}\n\n// Only send command if state changed\nif (newPumpState !== currentPumpState) {\n    flow.set('pump_state', newPumpState);\n    \n    // Send relay control command\n    var relayMsg = {\n        payload: newPumpState ? 1 : 0,  // 1 = close relay (start pump), 0 = open relay (stop pump)\n        topic: \"relay2\"\n    };\n    \n    // Send status update\n    var statusMsg = {\n        payload: newPumpState ? \"Running\" : \"Stopped\",\n        topic: \"pump_status\"\n    };\n    \n    return [relayMsg, statusMsg];\n}\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 130,
        "wires": [["relay-control"], ["pump-status-indicator"]]
    },
    {
        "id": "relay-control",
        "type": "rpi-gpio out",
        "z": "pump-control-tab",
        "name": "Relay 2 Control",
        "pin": "20",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 810,
        "y": 100,
        "wires": []
    },
    {
        "id": "tank-a-gauge",
        "type": "ui_gauge",
        "z": "pump-control-tab",
        "name": "Tank A Level",
        "group": "dashboard-group",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Dipòsit Inferior (A)",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#ff0000",
            "#ffaa00",
            "#00ff00"
        ],
        "seg1": "10",
        "seg2": "50",
        "className": "",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "tank-b-gauge",
        "type": "ui_gauge",
        "z": "pump-control-tab",
        "name": "Tank B Level",
        "group": "dashboard-group",
        "order": 2,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Dipòsit Superior (B)",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00ff00",
            "#ffaa00",
            "#ff0000"
        ],
        "seg1": "85",
        "seg2": "95",
        "className": "",
        "x": 580,
        "y": 280,
        "wires": []
    },
    {
        "id": "pump-status-indicator",
        "type": "ui_text",
        "z": "pump-control-tab",
        "group": "dashboard-group",
        "order": 3,
        "width": 6,
        "height": 2,
        "name": "Pump Status",
        "label": "Estat de la Bomba",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "pump-led-indicator",
        "type": "ui_led",
        "z": "pump-control-tab",
        "order": 4,
        "group": "dashboard-group",
        "width": 3,
        "height": 1,
        "label": "Bomba",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Pump LED",
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "pump-status-to-led",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Status to LED",
        "func": "// Convert pump status to boolean for LED\nif (msg.payload === \"Running\") {\n    msg.payload = true;\n} else {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [["pump-led-indicator"]]
    },
    {
        "id": "status-splitter",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Split Status",
        "func": "// Split pump status to both text and LED indicators\nreturn [msg, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [["pump-status-indicator"], ["pump-status-to-led"]]
    },
    {
        "id": "manual-override",
        "type": "ui_switch",
        "z": "pump-control-tab",
        "name": "Manual Override",
        "label": "Control Manual",
        "tooltip": "Activar per control manual de la bomba",
        "group": "control-group",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "manual_override",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 150,
        "y": 400,
        "wires": [["manual-override-handler"]]
    },
    {
        "id": "manual-pump-control",
        "type": "ui_switch",
        "z": "pump-control-tab",
        "name": "Manual Pump Control",
        "label": "Bomba Manual",
        "tooltip": "Control manual de la bomba (només actiu amb override)",
        "group": "control-group",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "manual_pump",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 150,
        "y": 460,
        "wires": [["manual-pump-handler"]]
    },
    {
        "id": "manual-override-handler",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Manual Override Handler",
        "func": "// Store manual override state\nflow.set('manual_override', msg.payload);\n\nif (msg.payload) {\n    node.status({fill:\"yellow\", shape:\"dot\", text:\"Manual mode active\"});\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"Auto mode active\"});\n    // When leaving manual mode, trigger automatic control check\n    return {payload: \"check_control\"};\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [["control-logic"]]
    },
    {
        "id": "manual-pump-handler",
        "type": "function",
        "z": "pump-control-tab",
        "name": "Manual Pump Handler",
        "func": "// Only process manual pump control if override is active\nvar manualOverride = flow.get('manual_override') || false;\n\nif (manualOverride) {\n    // Store manual pump state\n    flow.set('pump_state', msg.payload);\n    \n    // Send relay control command\n    var relayMsg = {\n        payload: msg.payload ? 1 : 0,\n        topic: \"relay2\"\n    };\n    \n    // Send status update\n    var statusMsg = {\n        payload: msg.payload ? \"Running (Manual)\" : \"Stopped (Manual)\",\n        topic: \"pump_status\"\n    };\n    \n    return [relayMsg, statusMsg];\n} else {\n    node.warn(\"Manual pump control ignored - override not active\");\n}\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [["relay-control"], ["status-splitter"]]
    },
    {
        "id": "venus-broker",
        "type": "mqtt-broker",
        "name": "Venus OS MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "dashboard-group",
        "type": "ui_group",
        "name": "Monitoring",
        "tab": "dashboard-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "control-group",
        "type": "ui_group",
        "name": "Control Manual",
        "tab": "dashboard-tab",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard-tab",
        "type": "ui_tab",
        "name": "Water Pump System",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]